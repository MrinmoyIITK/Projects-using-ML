import streamlit as st
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor
from xgboost import XGBRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

# Streamlit UI
st.title("Regression Model Comparison")
st.write("Here it is assumed that the last column is our target and the data given is preprocessed before contaning no missing values.")

# Upload CSV data
uploaded_file = st.file_uploader("Upload a CSV file", type=["csv"])
if uploaded_file is not None:
    data = pd.read_csv(uploaded_file)
    st.dataframe(data)

    # Data preprocessing
    X = data.iloc[:, :-1]
    y = data.iloc[:, -1]
    test_size = st.slider("Choose test size", min_value=0.1, max_value=0.5, step=0.1)

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=42)

    # Model selection
    models = {
        "Multiple Linear Regression": LinearRegression(),
        "Decision Tree": DecisionTreeRegressor(),
        "Random Forest": RandomForestRegressor(),
        "XGBoost": XGBRegressor(),
        "AdaBoost": AdaBoostRegressor()
    }

    metrics = {
        "Mean Squared Error": mean_squared_error,
        "Root Mean Squared Error": lambda y_true, y_pred: mean_squared_error(y_true, y_pred, squared=False),
        "Mean Absolute Error": mean_absolute_error,
        "R-squared": r2_score
    }

    st.subheader("Model Performance")

    for model_name, model in models.items():
        st.write(f"**{model_name}**")
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)

        st.write("**Evaluation Metrics:**")
        for metric_name, metric_func in metrics.items():
            metric_value = metric_func(y_test, y_pred)
            st.write(f"{metric_name}: {metric_value:.4f}")
